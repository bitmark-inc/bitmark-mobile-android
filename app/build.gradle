apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

apply from: 'versioning.gradle'

apply from: '../autodimension.gradle'

apply plugin: 'io.fabric'

apply plugin: 'io.sentry.android.gradle'

android {
  compileSdkVersion rootProject.ext.compileSdkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion

  defaultConfig {
    applicationId "com.bitmark.registry"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode buildVersionCode()
    versionName buildVersionName()
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    externalNativeBuild {
      cmake {
        cppFlags ""
      }
    }

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation":
            "$projectDir/schemas".toString()]
      }
    }
  }

  splits {
    abi {
      reset()
      enable project.hasProperty('splitApks')
      universalApk false // If true, also generate a universal APK
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }

  bundle {
    density {
      // Different APKs are generated for devices with different screen densities; true by default.
      enableSplit false
    }
    abi {
      // Different APKs are generated for devices with different CPU architectures; true by default.
      enableSplit true
    }
    language {
      // This is disabled so that the App Bundle does NOT split the APK for each language.
      // We're gonna use the same APK for all languages.
      enableSplit false
    }
  }

  androidExtensions {
    experimental = true
  }

  signingConfigs {

    debug {
      def keystorePropertiesFile = rootProject.file(
          "keystores/debug.properties")
      def keystoreProperties = new Properties()
      keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
      keyAlias keystoreProperties['key.alias']
      keyPassword keystoreProperties['key.alias.password']
      storeFile file('../keystores/debug.keystore')
      storePassword keystoreProperties['key.store.password']
    }

    release {
      def keystorePropertiesFile = rootProject.file(
          "keystores/release.properties")
      def keystoreProperties = new Properties()
      keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
      keyAlias keystoreProperties['key.alias']
      keyPassword keystoreProperties['key.alias.password']
      storeFile file('../keystores/release.keystore')
      storePassword keystoreProperties['key.store.password']
    }
  }

  buildTypes {

    debug {
      debuggable true
      minifyEnabled false
      signingConfig signingConfigs.debug
    }

    release {
      minifyEnabled true
      shrinkResources true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile("proguard-android.txt"),
          "proguard-rules.pro"
    }
  }
  // applicationVariants are e.g. debug, release
  applicationVariants.all { variant ->
    variant.outputs.each { output ->
      // For each separate APK per architecture, set a unique version code as described here:
      // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
      def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
      def abi = output.getFilter(com.android.build.OutputFile.ABI)
      if (abi != null) {
        // null for the universal-debug, universal-release variants
        output.versionCodeOverride =
            versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
      }
    }
  }

  compileOptions {
    sourceCompatibility 1.8
    targetCompatibility 1.8
  }

  externalNativeBuild {
    cmake {
      path "CMakeLists.txt"
    }
  }

  flavorDimensions "version"

  productFlavors {

    inhouse {
      dimension "version"
      applicationIdSuffix ".inhouse"
      resValue "string", "app_name", "Bitmark"
      resValue "string", "chibi_scheme", "registry"
      manifestPlaceholders = [
          appIcon: "@mipmap/ic_launcher_dev",
          appIconRound: "@mipmap/ic_launcher_dev_round"
      ]
      ext.betaDistributionReleaseNotesFilePath =
          "${project.rootDir}/distribution/release_note.txt"
      ext.betaDistributionEmailsFilePath =
          "${project.rootDir}/distribution/testers.txt"

      buildConfigField "String", "CORE_API_ENDPOINT",
          "\"https://api.test.bitmark.com\""
      buildConfigField "String", "MOBILE_SERVER_ENDPOINT",
          "\"https://bm.test.bitmark.com\""
      buildConfigField "String", "FILE_COURIER_SERVER_ENPOINT",
          "\"https://file-courier.test.bitmark.com\""
      buildConfigField "String", "PROFILE_SERVER_ENDPOINT",
          "\"https://profiles.test.bitmark.com\""
      buildConfigField "String", "REGISTRY_WEBSITE",
          "\"https://registry.test.bitmark.com\""
      buildConfigField "String", "ZERO_ADDRESS",
          "\"dw9MQXcC5rJZb3QE1nz86PiQAheMP1dx9M3dr52tT8NNs14m33\""
      buildConfigField "String", "KEY_ACCOUNT_SERVER_ENDPOINT",
          "\"https://key.test.bitmarkaccountassets.com\""
      buildConfigField "String", "REGISTRY_WEB_ENDPOINT",
          "\"https://registry.test.bitmark.com\""
      buildConfigField "String", "NOTIFICATION_CLIENT",
          "\"registryinhouse\""
      buildConfigField "String", "TERMS_OF_SERVICE_URL",
          "\"https://bitmark.com/en/legal/terms?env=app\""
      buildConfigField "String", "PRIVACY_POLICY_URL",
          "\"https://bitmark.com/en/legal/privacy?env=app\""
      buildConfigField 'String', 'REGISTRY_API_ENDPOINT',
          "\"https://registry.test.bitmark.com/s/api/\""
      buildConfigField 'String', 'PROFILE_SERVER_ENDPOINT',
          "\"https://profiles.test.bitmark.com/\""
    }

    prd {
      dimension "version"
      resValue "string", "app_name", "Bitmark"
      resValue "string", "chibi_scheme", "registry"
      manifestPlaceholders = [
          appIcon: "@mipmap/ic_launcher",
          appIconRound: "@mipmap/ic_launcher_round"
      ]
      ext.betaDistributionReleaseNotesFilePath =
          "${project.rootDir}/distribution/release_note.txt"
      ext.betaDistributionEmailsFilePath =
          "${project.rootDir}/distribution/testers.txt"

      buildConfigField "String", "CORE_API_ENDPOINT",
          "\"https://api.bitmark.com\""
      buildConfigField "String", "MOBILE_SERVER_ENDPOINT",
          "\"https://bm.bitmark.com\""
      buildConfigField "String", "FILE_COURIER_SERVER_ENPOINT",
          "\"https://file-courier.bitmark.com\""
      buildConfigField "String", "PROFILE_SERVER_ENDPOINT",
          "\"https://profiles.bitmark.com\""
      buildConfigField "String", "REGISTRY_WEBSITE",
          "\"https://registry.bitmark.com\""
      buildConfigField "String", "ZERO_ADDRESS",
          "\"a3ezwdYVEVrHwszQrYzDTCAZwUD3yKtNsCq9YhEu97bPaGAKy1\""
      buildConfigField "String", "KEY_ACCOUNT_SERVER_ENDPOINT",
          "\"https://key.bitmarkaccountassets.com\""
      buildConfigField "String", "REGISTRY_WEB_ENDPOINT",
          "\"https://registry.bitmark.com\""
      buildConfigField "String", "NOTIFICATION_CLIENT",
          "\"registry\""
      buildConfigField "String", "TERMS_OF_SERVICE_URL",
          "\"https://bitmark.com/en/legal/terms?env=app\""
      buildConfigField "String", "PRIVACY_POLICY_URL",
          "\"https://bitmark.com/en/legal/privacy?env=app\""
      buildConfigField 'String', 'REGISTRY_API_ENDPOINT',
          "\"https://registry.bitmark.com/s/api/\""
      buildConfigField 'String', 'PROFILE_SERVER_ENDPOINT',
          "\"https://profiles.bitmark.com/\""
    }
  }

  packagingOptions {
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/ASL2.0'
    exclude 'lib/libsodiumjni.dylib'
    exclude 'lib/libsodiumjni.so'
  }

  sentry {
    // Disables or enables the automatic configuration of proguard
    // for Sentry.  This injects a default config for proguard so
    // you don't need to do it manually.
    autoProguardConfig true

    // Enables or disables the automatic upload of mapping files
    // during a build.  If you disable this you'll need to manually
    // upload the mapping files with sentry-cli when you do a release.
    autoUpload true
  }
}

dependencies {

  // Basic
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

  // temporarily use this version of appcompat to avoid crashing in IntercomMessengerActivity
  // @see https://community.intercom.com/t/intercom-android-sdk-crashing-with-android-appcompat-1-1-0-alpha03/1095
  implementation 'androidx.appcompat:appcompat:1.1.0-alpha02'

  implementation 'androidx.core:core-ktx:1.2.0-alpha02'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

  // Dagger
  implementation 'com.google.dagger:dagger-android:2.23.2'
  implementation 'com.google.dagger:dagger-android-support:2.23.2'
  kapt 'com.google.dagger:dagger-android-processor:2.23.2'
  kapt 'com.google.dagger:dagger-compiler:2.23.2'

  // Rx2
  implementation 'io.reactivex.rxjava2:rxjava:2.2.10'
  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

  // Retrofit + Okhttp
  implementation "com.squareup.retrofit2:retrofit:2.6.0"
  implementation "com.squareup.retrofit2:adapter-rxjava2:2.6.0"
  implementation "com.squareup.retrofit2:converter-gson:2.6.0"
  implementation "com.squareup.okhttp3:okhttp:4.0.0"
  implementation "com.squareup.okhttp3:logging-interceptor:4.0.0"

  // Architecture component
  implementation "android.arch.lifecycle:livedata:2.0.0"
  implementation "android.arch.lifecycle:runtime:2.0.0"
  kapt "android.arch.lifecycle:compiler:2.0.0"

  // Room
  implementation 'androidx.room:room-runtime:2.1.0'
  kapt 'androidx.room:room-compiler:2.1.0'
  implementation 'androidx.room:room-rxjava2:2.1.0'

  // Glide
  implementation 'com.github.bumptech.glide:glide:4.9.0'
  kapt 'com.github.bumptech.glide:compiler:4.9.0'

  // Google Drive
  implementation 'com.google.android.gms:play-services-auth:17.0.0'
  implementation('com.google.api-client:google-api-client-android:1.26.0') {
    exclude group: 'org.apache.httpcomponents'
  }
  implementation('com.google.apis:google-api-services-drive:v3-rev136-1.25.0') {
    exclude group: 'org.apache.httpcomponents'
  }
  implementation 'com.google.http-client:google-http-client-gson:1.26.0'

  // Others
  implementation 'com.bitmark.sdk:android-sdk:2.1.0-SNAPSHOT'
  implementation 'com.google.firebase:firebase-messaging:19.0.1'
  implementation 'com.aurelhubert:ahbottomnavigation:2.3.4'
  implementation 'com.google.code.gson:gson:2.8.5'
  implementation 'com.google.zxing:core:3.3.3'
  implementation('com.journeyapps:zxing-android-embedded:3.6.0') {
    transitive = false
  }
  implementation 'com.github.tbruyelle:rxpermissions:0.10.2'
  implementation 'io.intercom.android:intercom-sdk:5.4.0'
  implementation('com.crashlytics.sdk.android:crashlytics:2.9.8@aar') {
    transitive = true
  }
  implementation 'io.sentry:sentry-android:1.7.27'
  implementation 'org.slf4j:slf4j-nop:1.7.25'

  //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.0-beta-2'

  // Testing
  testImplementation 'junit:junit:4.12'
  androidTestImplementation 'androidx.test:runner:1.3.0-alpha01'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0-alpha01'
}

task fillSecretKey << {
  def keyPropertiesFile = rootProject.file('key.properties')
  def keyProperties = new Properties()
  keyProperties.load(new FileInputStream(keyPropertiesFile))
  def apiKeyFile = file('src/main/jni/api-key.cpp')
  def content = apiKeyFile.getText()
  content = content.replace('bitmark-api-key-to-be-filled',
      keyProperties['api.key.bitmark'])
      .
      replace('intercom-api-key-to-be-filled',
          keyProperties['api.key.intercom'])
  apiKeyFile.bytes = []
  apiKeyFile.text = content
}

configurations.all {
  resolutionStrategy.eachDependency { details ->
    def requested = details.requested
    if (requested.group == 'androidx.appcompat') {
      details.useVersion '1.1.0-alpha02'
    }
  }
}

apply plugin: 'com.google.gms.google-services'
